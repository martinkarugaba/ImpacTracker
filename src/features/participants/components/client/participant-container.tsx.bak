"use client";

import { useState } from "react";
import { type Participant } from "../../types/types";
import { ParticipantsTable } from "../participants-table";
import { ParticipantMetrics } from "../metrics/participant-metrics";
import { useParticipantData } from "./participant-data-provider";
import { useParticipantFormHandlers } from "./participant-form-handlers";
import { extractClusterOrganizations } from "./participant-transformer";
import { type ParticipantContainerProps } from "./types";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  ChevronDown,
  ChevronUp,
  Users,
  UserCheck,
  CircleUser,
  Gauge,
} from "lucide-react";
import { useParticipantMetrics } from "../metrics/hooks/use-participant-metrics";

export function ParticipantContainer({
  clusterId,
  projects,
  clusters,
  searchParams,
}: ParticipantContainerProps) {
  // UI state
  const [isOpen, setIsOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [editingParticipant, setEditingParticipant] =
    useState<Participant | null>(null);
  const [metricsVisible, setMetricsVisible] = useState(false);

  // Get participant data and related state
  const {
    participantsData,
    isLoadingParticipants,
    participantsResult,
    metricsData,
    isLoadingMetrics,
    applyFiltersToMetrics,
    toggleMetricsFilters,
    filters,
    handleFilterChange,
    handlePageChange,
    handlePageSizeChange,
    handleSearchChange,
    searchTerm,
    districts,
    sexOptions,
  } = useParticipantData({
    clusterId,
    initialSearchParams: searchParams,
  });

  // Get form handling functions
  const {
    handleSubmit,
    handleImportParticipants,
    handleEdit,
    handleDelete,
    handleAdd,
  } = useParticipantFormHandlers({
    clusterId,
    onSetIsLoading: setIsLoading,
    onSetIsOpen: setIsOpen,
    onSetEditingParticipant: setEditingParticipant,
  });

  // Get organizations data
  const clusterOrganizations = extractClusterOrganizations(clusterId, clusters);

  // Calculate key metrics for the contextual badges
  const metrics = useParticipantMetrics(metricsData);
  const {
    totalParticipants,
    totalFemales,
    totalMales,
    femalePercent,
    malePercent,
    disabledPercent,
    formatPercent,
  } = metrics;

  return (
    <div className="container mx-auto max-w-7xl py-10">
      <div className="flex flex-col gap-4 md:gap-6">
        {/* Collapsible Metrics Panel */}
        <div className="w-full">
          <div className="mb-4 flex items-center justify-between">
            <h3 className="text-lg font-medium">Participant Overview</h3>
            <Button
              variant="ghost"
              onClick={() => setMetricsVisible(!metricsVisible)}
              className="flex items-center gap-2"
            >
              {metricsVisible ? (
                <>
                  Hide Details <ChevronUp className="h-4 w-4" />
                </>
              ) : (
                <>
                  Show Details <ChevronDown className="h-4 w-4" />
                </>
              )}
            </Button>
          </div>

          {metricsVisible && (
            <div className="animate-in slide-in-from-top duration-300">
              <ParticipantMetrics
                participants={metricsData}
                isLoading={isLoadingMetrics}
                isFiltered={applyFiltersToMetrics}
                onToggleFiltered={toggleMetricsFilters}
              />
            </div>
          )}
        </div>

        {/* Contextual Badges */}
        <div className="mb-2 flex flex-wrap items-center gap-3">
          <Badge
            variant="outline"
            className="flex items-center gap-1.5 px-3 py-1"
          >
            <Users className="text-primary h-3.5 w-3.5" />
            <span>
              Total:{" "}
              <strong>{isLoadingMetrics ? "..." : totalParticipants}</strong>
            </span>
          </Badge>

          <Badge
            variant="outline"
            className="flex items-center gap-1.5 px-3 py-1"
          >            <UserCheck className="h-3.5 w-3.5 text-pink-400" />
            <span>
              Female:{" "}
              <strong>
                {isLoadingMetrics
                  ? "..."
                  : `${formatPercent(femalePercent)}% (${totalFemales})`}
              </strong>
            </span>
          </Badge>
          
          <Badge
            variant="outline"
            className="flex items-center gap-1.5 px-3 py-1"
          >
            <CircleUser className="h-3.5 w-3.5 text-blue-400" />
            <span>
              Male:{" "}
              <strong>
                {isLoadingMetrics
                  ? "..."
                  : `${formatPercent(malePercent)}% (${totalMales})`}
              </strong>
            </span>
          </Badge>
          
          <Badge
            variant="outline"
            className="flex items-center gap-1.5 px-3 py-1"
          >
            <Gauge className="h-3.5 w-3.5 text-purple-400" />
            <span>
              PWD:{" "}
              <strong>
                {isLoadingMetrics
                  ? "..."
                  : `${formatPercent(disabledPercent)}%`}
              </strong>
            </span>
          </Badge>
        </div>

        <ParticipantsTable
          data={participantsData}
          onEdit={handleEdit}
          onDelete={handleDelete}
          onAdd={handleAdd}
          isOpen={isOpen}
          setIsOpen={setIsOpen}
          editingParticipant={editingParticipant}
          handleSubmit={handleSubmit}
          onImportParticipants={handleImportParticipants}
          isLoading={isLoading || isLoadingParticipants}
          tableIsLoading={isLoadingParticipants}
          tableError={
            !participantsResult?.success ? participantsResult?.error : ""
          }
          projects={projects}
          organizations={clusterOrganizations}
          clusters={clusters}
          districts={districts}
          sexOptions={sexOptions}
          filters={filters}
          setFilters={handleFilterChange}
          pagination={participantsResult?.data?.pagination}
          onPageChange={handlePageChange}
          onPageSizeChange={handlePageSizeChange}
          onSearchChange={handleSearchChange}
          searchTerm={searchTerm}
        />
      </div>
    </div>
  );
}
